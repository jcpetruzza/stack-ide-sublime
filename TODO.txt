
[ ] Implement switching targets using Sublime's UI helpers. How do we get the list of possible targets?



[ ] Implement tooltips for type and doc information.
    See here for Sublime Text API:
    https://www.sublimetext.com/forum/viewtopic.php?f=2&t=17583&start=40

    (maybe just use an "info" panel for this?)

    See here for ide-backend-client API:
    https://github.com/chrisdone/ide-backend-client/tree/master/ide-backend-client


[ ] Figure out autocompletion for qualified names, e.g. Map.insert
    It may be necessary to remove . from the "word_separators" sublime preference to get sublime to report the full name to the autocompletion plugin,
    i.e. change it to:
    "word_separators": "/\\()\"'-:,;<>~!@#$%^&*|+=[]{}`~?",
    (note that in the default there are two occurrences of . - be sure to remove them both)
    This wasn't quite enough, so test stack-ide/ide-backend to see if it handles qualified autocompletion correctly.


[ ] Perhaps change references to GHC.Base, GHC.List, etc., in autocomplete into just "Prelude"? I find them noisy.


DONE:

[x] End sessions correctly on Window close event (worked around no window close event with a watchdog)

[x] Completions are asynchronous, so we only see them if we type e.g. f<delete>f or on the second letter.
    See if we can re-trigger the completion list once the completions arrive.


[x] Implement getExpTypes to just follow the cursor around and place the type in the status bar?
    To complement the larger getSpanInfo above.
    Need to ensure it's persistent enough and maybe log it to a buffer too for copy-pasteability
    (Oh, we can probably use the status flag API for the persistence part)

[x] Use `stack ide load-targets` asynchronously at startup (and maybe with a key command) and have it pass its results into update_session_includes at startup. We can keep the current "on save, add to update_session_includes", but we should keep a persistent list of them so we always pass the full list. We may need a "clear" command with this approach, in case you save two modules containing a main function, for example (is there a better way?).
